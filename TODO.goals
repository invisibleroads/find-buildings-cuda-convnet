# US/Pacific 5/22/2014
Verify routines
    + Check that cifar-10 has data that is plottable by get_plottable_data
    + Check that new ccn-make-batches produces data that is plottable by get_plottable_data
    _ Check that old ccn-make-batches produces data that is plottable by get_plottable_data
    + Check that get_tiles_from_image produces tiles with the correct orientation
    + Check that get_examples_from_points produces arrays that are directly plottable
        + Check that the array orientation is correct and matches the satellite image
    + Check that get_dataset_from_examples produces arrays that are directly plottable
        + Check that the array orientation is correct and matches the satellite image
    + Check that get_arrays_from_image produces arrays that are directly plottable
        + Check that the array orientation is correct and matches the satellite image
    Check that get_batches_from_dataset produces data that is plottable by get_plottable_data
    Check that get_batches_from_arrays produces data that is plottable by get_plottable_data

Send computer estimates for building count in 10m windows
    = Write bash script to train and run cudaconv2
        = Train with Myanmar and test on Myanmar
            + Consolidate changes
                + Consolidate changes to cuda-convnet
                + Consolidate changes to noccn
                + Write bash script to run experiment
                    + Generate training batches
                    + Generate test batches
                    + Use sys.path.append
                    _ Convert cuda-convnet to use setup.py
                + Consolidate layer configurations
                + Consolidate script to save batches

            Setup machine
                Write script to set up gpu machine
        Train with all and test on Myanmar
        Write get_counts_from_predictions
            Run non-maximal suppression on predictions
        Record execution time
        Record precision and recall
    Write bash script to train and run SGDClassifier
        = Write get_dataset_from_datasets
        Run train Myanmar and test on Myanmar
        Train with all and test on Myanmar
    Finalize initial architecture
        = Evaluate new libraries for image recognition [6h]
            Train classifier with dropconnect
            Train classifier with pybrain
            Train classifier with pynnet
            Train classifier with opencv
            Train classifier with neurolab
            Train classifier with pylearn2
            Train classifier with theano
            Train classifier with OverFeat
Combine Amazon Mechanical Turk results into a clean dataset [8h]
    Set up Amazon Mechanical Turk to estimate the building count in a window [10h]
Reach cross-validation accuracy of 75%
    Optimize classifier to estimate the building count in a window [20h]
Evaluate classifiers on cost-effective lower resolution satellite images
    Train classifiers on lower resolution satellite images [14h]
Reach cross-validation accuracy of 80%
    Apply different techniques to improve classifier performance [14h]
        Experiment with zero mean and dividing by standard deviation
        Experiment with dropout and extra hidden layers
        Experiment with random translations of training set
        Experiment with weight norm constraint
        Experiment with autoencoders to pretrain neural network
        Experiment with YUV colorspace
Explore new libraries
    Write code example with https://code.google.com/p/pyresample/
    Write code example with https://github.com/mraspaud/mpop
    Write code example with https://github.com/matplotlib/basemap
    Write code example with https://code.google.com/p/pycoast/
    Write code example with https://github.com/mraspaud/trollimage
    Write code example with https://pypi.python.org/pypi/OWSLib
    Work through tutorials on http://www.pytroll.org/
    Write code example with scikit-image
    Write code example with cartopy
Send access credentials to all tools, valid with no membership fee for one year
    = Experiment with boto
    Mask paths in run.pkl
    Feature Modi Research Group logo and link on tool webpage
