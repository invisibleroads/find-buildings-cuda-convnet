# UTC 07/04/2014
+ Evaluate classifiers on myanmar0 [07/04/2014]
+ Evaluate myanmar-20140618-1609 [07/04/2014]
+ Evaluate myanmar-20140622-144958 [07/04/2014]
+ Evaluate myanmar-20140622-212724 [07/04/2014]
+ Evaluate myanmar-20140623-064851 [07/04/2014]
+ Evaluate myanmar-20140623-141718 with dropout [07/04/2014]
+ Evaluate myanmar-20140623-1509 with extra training [07/04/2014]
+ Evaluate generic-20140622-0945 [07/04/2014]
+ Evaluate generic-20140622-1154 [07/04/2014]
+ Evaluate generic-20140622-1630 [07/04/2014]
+ Evaluate generic-20140623-0755 [07/04/2014]
+ Evaluate classifiers on uganda0 [07/04/2014]
+ Evaluate uganda-20140619-0812 [07/04/2014]
+ Evaluate uganda-20140622-0131 [07/04/2014]
+ Evaluate uganda-20140623-141751 [07/04/2014]
+ Evaluate uganda-20140623-173736 with dropout [07/04/2014]
+ Evaluate generic-20140622-0945 [07/04/2014]
+ Evaluate generic-20140622-1154 [07/04/2014]
+ Evaluate generic-20140622-1630 [07/04/2014]
+ Evaluate generic-20140623-0755 [07/04/2014]
+ Consider being able to cherry pick negative examples [06/22/2014]
+ Ignore zero arrays [06/22/2014]
+ Make speed optimized BatchGroup [06/22/2014]
+ Exclude standard deviation [06/22/2014]
+ Compute mean using shortcut [06/22/2014]
+ Test whether mean of resized is similar to resized of mean [06/22/2014]
+ Select country-specific PIXEL_BOUNDS for generic [06/22/2014]
+ Optimize auc despite class imbalance [06/22/2014]
+ Set up class ratio experiment [06/22/2014]
+ Modify get_dataset_from_examples [06/22/2014]
+ Record execution time [06/22/2014]
+ Explore new libraries [06/14/2014]
+ Test whether we should set all wc=0 for Cropped [06/12/2014]
+ Backup 210k country classifiers [06/12/2014]
+ Use 210k generic [06/12/2014]
+ Write script to predict a large image [06/12/2014]
+ Use n-1 generic [06/12/2014]
+ Train n-1 generic [06/12/2014]
+ Backup training_batches for generic [06/12/2014]
+ Make full training_dataset for each country [06/12/2014]
+ Use cifar [06/12/2014]
+ Update get_counts_from_probabilities to get actual_count from points_path [06/03/2014]
+ Backup datasets for each country [06/03/2014]
+ Backup examples for each country [06/03/2014]
+ Backup training_batches_210k for each country and generic [06/03/2014]
+ Make myanmar classifier [06/03/2014]
+ Make ethiopia classifier [06/03/2014]
+ Make mali classifier [06/03/2014]
+ Make senegal classifier [06/03/2014]
+ Make tanzania classifier [06/03/2014]
+ Make uganda classifier [06/03/2014]
+ Ask Shaky to include infrared band next time when pan-sharpening [06/03/2014]
+ Run primary experiments [06/01/2014]
+ Evaluate experimental results [06/01/2014]
+ Write get_counts_from_predictions [06/01/2014]
+ Run non-maximal suppression on predictions [06/01/2014]
+ Optimize radius [06/01/2014]
+ Generate control results with 100k and excluded region [05/31/2014]
+ Determine whether it is better to use more data (dataset_size) [05/31/2014]
+ Experiment with zero mean and dividing by standard deviation [05/31/2014]
+ Experiment with dropout and extra hidden layers [05/31/2014]
+ Experiment with random translations of training set [05/31/2014]
+ Compare different layer configurations [05/31/2014]
+ Determine whether it is better to use all countries [05/31/2014]
+ Record precision and recall [05/31/2014]
+ Train with Myanmar 100k and test on Myanmar (control) [05/30/2014]
+ Train with Myanmar and test on Myanmar (control) [05/30/2014]
+ Experiment with zero mean (control) [05/30/2014]
+ Experiment with no random translations (control) [05/30/2014]
+ Experiment with no dropout (control) [05/30/2014]
+ Experiment with no weight norm constraint (control) [05/30/2014]
+ Experiment with no rnorm (control) [05/30/2014]
+ Experiment with no local pooling (control) [05/30/2014]
+ Experiment with no early stopping (control) [05/30/2014]
+ Train with Myanmar 50k and test on Myanmar [05/30/2014]
+ Train with Myanmar 100k and test on Myanmar (control) [05/30/2014]
+ Train with Myanmar 200k and test on Myanmar [05/30/2014]
+ Experiment with raw [05/30/2014]
+ Experiment with zero mean (control) [05/30/2014]
+ Experiment with zero mean and standard deviation (unit_variance) [05/30/2014]
+ Experiment with no dropout (control) [05/30/2014]
+ Experiment with one hidden layer (dropout_layers) [05/30/2014]
+ Experiment with two hidden layers [05/30/2014]
+ Experiment with no random translations (control) [05/30/2014]
+ Experiment with random translations (random_translations) [05/30/2014]
+ layers-conv-local-11pct.cfg (layer_parameters) [05/30/2014]
+ layers-conv-local-13pct.cfg [05/30/2014]
+ layers-18pct.cfg [05/30/2014]
+ layers-19pct.cfg (control) [05/30/2014]
+ layers-80sec.cfg [05/30/2014]
+ Train with all and test on Myanmar (all_countries) [05/30/2014]
+ Write get_batches_from_datasets [05/30/2014]
+ Train with Myanmar and test on Myanmar (control) [05/30/2014]
+ Experiment with no early stopping (control) [05/30/2014]
+ Experiment with no weight norm constraint (control) [05/30/2014]
+ Write code example with scikit-image [05/27/2014]
+ Verify routines [05/27/2014]
+ Check that get_batches_from_arrays produces data that is plottable by get_plottable_data [05/27/2014]
+ Train with Myanmar and test on Myanmar [05/27/2014]
+ Setup machine [05/27/2014]
+ Write script to set up gpu machine [05/27/2014]
+ Check that cifar-10 has data that is plottable by get_plottable_data [05/26/2014]
+ Check that new ccn-make-batches produces data that is plottable by get_plottable_data [05/26/2014]
+ Check that get_tiles_from_image produces tiles with the correct orientation [05/26/2014]
+ Check that get_examples_from_points produces arrays that are directly plottable [05/26/2014]
+ Check that the array orientation is correct and matches the satellite image [05/26/2014]
+ Check that get_dataset_from_examples produces arrays that are directly plottable [05/26/2014]
+ Check that the array orientation is correct and matches the satellite image [05/26/2014]
+ Check that get_arrays_from_image produces arrays that are directly plottable [05/26/2014]
+ Check that the array orientation is correct and matches the satellite image [05/26/2014]
+ Check that get_batches_from_dataset produces data that is plottable by get_plottable_data [05/26/2014]
+ Consolidate changes [05/26/2014]
+ Consolidate changes to cuda-convnet [05/26/2014]
+ Consolidate changes to noccn [05/26/2014]
+ Write bash script to run experiment [05/26/2014]
+ Generate training batches [05/26/2014]
+ Generate test batches [05/26/2014]
+ Use sys.path.append [05/26/2014]
+ Consolidate layer configurations [05/26/2014]
+ Consolidate script to save batches [05/26/2014]
+ Run cuda-convnet on test dataset [05/22/2014]
+ Run cuda-convnet on d10k [05/22/2014]
+ Train [05/22/2014]
+ Generate d10k dataset [05/22/2014]
+ Make batches from d10k dataset [05/22/2014]
+ Generate predictions on test [05/22/2014]
+ Generate test arrays [05/22/2014]
+ Generate test batches [05/22/2014]
+ Train classifier with cuda-convnet and dropout [05/22/2014]
+ Set up CUDA on laptop [05/21/2014]
+ Run cuda-convnet on cifar10 [05/21/2014]
+ Run cuda-convnet on cifar10 with dropout [05/21/2014]
+ Add layer [05/21/2014]
+ Set up server on digitalocean [05/21/2014]
+ Set up server with lots of memory [05/21/2014]
+ Train classifier with scikit-learn [05/21/2014]
+ Train classifier with cuda-convnet and noccn [05/21/2014]
+ Write train with Myanmar and test on Myanmar [05/11/2014]
+ Write train with Myanmar and test on Myanmar [05/11/2014]
+ Set default output file in get_predictions_from_arrays [05/10/2014]
+ Add arguments [05/10/2014]
+ Use default output file in arrays_folder [05/10/2014]
+ Set default output file in get_marker_from_dataset [05/10/2014]
+ Write bash test script [05/10/2014]
+ Add arguments [05/10/2014]
+ Add starter [05/10/2014]
+ Write bash test script [05/10/2014]
+ Add starter [05/10/2014]
+ Write get_arrays_from_image [05/09/2014]
+ Add script to setup.py [05/09/2014]
+ Write bash test script [05/09/2014]
+ Add starter [05/09/2014]
+ Add arguments [05/09/2014]
+ Set default output file in get_arrays_from_image [05/09/2014]
+ Add script to setup.py [05/09/2014]
+ Add script to setup.py [05/09/2014]
+ Set default output file in get_dataset_from_examples [05/08/2014]
+ Write bash test script [05/08/2014]
+ Add starter [05/08/2014]
+ Add arguments [05/08/2014]
+ Use default output file in examples_folder [05/08/2014]
+ Check get_tiles_from_image [05/08/2014]
+ Set default output file in get_examples_from_points [05/08/2014]
+ Write bash script to train and run sklearn.logistic_regression [05/08/2014]
+ Write get_predictions_from_arrays.py [04/30/2014]
+ Use --target_folder [04/30/2014]
+ Save run.pkl [04/30/2014]
+ Update get_markers_from_datasets.py [04/20/2014]
+ Use --target_folder [04/20/2014]
+ Save run.pkl [04/20/2014]
+ Build dataset [04/09/2014]
+ Build production test dataset [04/09/2014]
+ Target t400x300/173-pul13600x2400.jpg 13600,2400,14400,3000 [04/09/2014]
+ Add --stay_inside_pixel_bounds to get_examples_from_points [04/09/2014]
+ Build production training dataset [04/09/2014]
+ Exclude t400x300/173-pul13600x2400.jpg 13600,2400,14400,3000 [04/09/2014]
+ Build development training dataset [04/08/2014]
+ Update get_dataset_from_examples.py [04/08/2014]
+ Use --target_folder [04/08/2014]
+ Save run.pkl [04/08/2014]
+ Update get_examples_from_points.py [04/06/2014]
+ Use --target_folder [04/06/2014]
+ Save run.pkl [04/06/2014]
+ Update get_tiles_from_image.py [04/06/2014]
+ Use --target_folder [04/06/2014]
+ Save run.pkl [04/06/2014]
+ Write get_markers_from_datasets.py [04/06/2014]
+ Write code example with https://github.com/storpipfugl/pykdtree [04/01/2014]
+ Schedule demo with Modi Research Group [03/17/2014]
+ Write get_tiles_from_images.py [03/17/2014]
+ Write get_examples_from_points.py [03/17/2014]
+ Write get_datasets_from_examples.py [03/17/2014]
+ Investigate new packages related to image classification [03/09/2014]
+ Investigate https://github.com/zygmuntz/kaggle-cifar [03/09/2014]
+ Investigate http://fastml.com/object-recognition-in-images-with-cuda-convnet/ [03/09/2014]
+ Investigate http://fastml.com/regularizing-neural-networks-with-dropout-and-with-dropconnect/ [03/09/2014]
+ Investigate https://code.google.com/p/cuda-convnet/ [03/09/2014]
+ Investigate https://code.google.com/p/pynnet/ [03/09/2014]
+ Investigate https://github.com/rjpower/fastnet [03/09/2014]
+ Investigate https://code.google.com/p/neurolab/ [03/09/2014]
+ Investigate https://github.com/dnouri/noccn [03/09/2014]
+ Investigate https://github.com/iskandr/striate [03/09/2014]
+ Investigate http://deeplearning.net/software/pylearn2/ [03/09/2014]
+ Investigate http://deeplearning.net/software/theano/ [03/09/2014]
+ Investigate http://opencv.org/ [03/09/2014]
+ Investigate http://pybrain.org/ [03/09/2014]
+ Investigate http://scikit-image.org/ [03/09/2014]
+ Investigate http://scikit-learn.org/dev/ [03/09/2014]
+ Generate dataset [03/08/2014]
+ Send update to Eric Lee [03/08/2014]
+ Send human estimates for building count in 10k windows [03/08/2014]
+ Send update to Vijay Modi [03/08/2014]
+ Generate windows for human inspection [03/01/2014]
+ Decide window length and width based on average building dimensions [03/01/2014]
+ Support x delimiter as well as comma [03/01/2014]
+ Write script to extract windows for image recognition from a satellite image [02/13/2014]
+ Write script to extract windows for human inspection from satellite image [02/13/2014]
+ Design wrapper API [02/12/2014]
+ Implement wrapper API [02/12/2014]
+ Integrate scope_pixel_dimensions into save_pixel_frame [02/12/2014]
+ Get gridded geo points given image and dimensions [02/12/2014]
+ Implement Calibration.get_pixel_xy() [02/12/2014]
+ Implement Calibration.get_dimensions() [02/12/2014]
+ Implement Calibration.get_pixel_dimensions() [02/12/2014]
+ Get array given image and pixel coordinates and pixel dimensions [02/12/2014]
+ Get array given image and geo coordinates and geo dimensions [02/12/2014]
+ Get array given two images and geo coordinates and geo dimensions and function [02/12/2014]
+ Write script that a extracts a window from the infrared band [02/12/2014]
+ Recover old code from https://github.com/invisibleroads/furtherperception [02/05/2014]
+ Investigate new packages related to satellite images [02/05/2014]
+ Investigate http://spectralpython.sourceforge.net/ [02/05/2014]
+ Investigate https://code.google.com/p/pyresample/ [02/05/2014]
+ Investigate https://github.com/adybbroe/pyspectral [02/05/2014]
+ Investigate https://github.com/matplotlib/basemap [02/05/2014]
+ Investigate https://github.com/mraspaud/mpop [02/05/2014]
+ Investigate http://geospatialpython.com/2011/02/clip-raster-using-shapefile.html [02/05/2014]
+ Investigate http://openev.sourceforge.net/index.php [02/05/2014]
+ Investigate http://www.pydap.org/ [02/05/2014]
+ Investigate http://www.pytroll.org/ [02/05/2014]
+ Investigate https://code.google.com/p/image-preprocessing/ [02/05/2014]
+ Investigate https://code.google.com/p/pycoast/ [02/05/2014]
+ Investigate https://code.google.com/p/pydecorate/ [02/05/2014]
+ Investigate https://github.com/loerum/mipp [02/05/2014]
+ Investigate https://github.com/mraspaud/trollcast [02/05/2014]
+ Investigate https://github.com/mraspaud/trollimage [02/05/2014]
+ Investigate https://pypi.python.org/pypi/OWSLib [02/05/2014]
+ Investigate https://code.google.com/p/pyresample/ [02/04/2014]
+ Investigate https://github.com/storpipfugl/pykdtree [02/04/2014]
+ Investigate https://github.com/adybbroe/python-geotiepoints [02/04/2014]
+ Investigate https://github.com/mraspaud/posttroll [02/04/2014]
+ Recommend type of satellite imagery to acquire [01/29/2014]